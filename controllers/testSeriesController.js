// nextExams-backend/controllers/testSeriesController.js
import mongoose from 'mongoose';
import Question from '../models/Question.js';
import TestSeries from '../models/testSeriesModel.js';
import User from '../models/User.js';
import Notification from '../models/Notification.js';
import calcScore from '../utils/calcScore.js';


const detailedQuestionPopulation = {
Â  path: 'sections.questions',
Â  model: 'Question',
Â  select: 'questionType correctAnswer answerMin answerMax marks negativeMarks'
};

// POST: Create a new Test Series
export const createTestSeries = async (req, res) => {
Â  try {
Â  Â  const { sections, testDurationInMinutes } = req.body;

Â  Â  if (!testDurationInMinutes && sections?.length > 0) {
Â  Â  Â  req.body.testDurationInMinutes = sections.reduce((sum, sec) => {
Â  Â  Â  Â  return sum + (sec.durationInMinutes || 0);
Â  Â  Â  }, 0);
Â  Â  }

Â  Â  const test = new TestSeries(req.body);
Â  Â  const savedTest = await test.save();

Â  Â  const questionIds = savedTest.sections.flatMap(sec => sec.questions);
Â  Â  const sourceTag = `source_test_${savedTest._id}`;

Â  Â  await Question.updateMany(
Â  Â  Â  { _id: { $in: questionIds } },
Â  Â  Â  { $addToSet: { tags: sourceTag } }
Â  Â  );
Â  Â  
Â  Â  // --- START: NOTIFICATION LOGIC ---
Â  Â  try {
Â  Â  Â  if (savedTest.status === 'Published') { // Only notify if the test is published
Â  Â  Â  Â  const message = `ðŸš€ New Test Available: ${savedTest.title}`;
Â  Â  Â  Â  const link = `/tests/${savedTest._id}`; 
Â  Â  Â  Â  const allUsers = await User.find({ role: 'user' }, '_id'); // Notify only users, not admins

Â  Â  Â  Â if (allUsers.length > 0) {
Â  Â  const notifications = allUsers.map(user => ({
Â  Â  Â  Â  user: user._id,
Â  Â  Â  Â  message,
Â  Â  Â  Â  link
Â  Â  }));

Â  Â  await Notification.insertMany(notifications);

Â  Â  // Socket emissions still need to be in a loop
Â  Â  allUsers.forEach(user => {
Â  Â  Â  Â  const userSocketId = req.onlineUsers[user._id.toString()];
Â  Â  Â  Â  if (userSocketId) {
Â  Â  Â  Â  Â  Â  // You can emit a simplified object for real-time speed
Â  Â  Â  Â  Â  Â  req.io.to(userSocketId).emit("newNotification", { message, link });
Â  Â  Â  Â  }
Â  Â  });
}
Â  Â  Â  }
Â  Â  } catch (notificationError) {
Â  Â  Â  console.error("Failed to send notifications:", notificationError);
Â  Â  }
Â  Â  // --- END: NOTIFICATION LOGIC ---

Â  Â  res.status(201).json(savedTest);
Â  } catch (err) {
Â  Â  console.error('Create TestSeries Error:', err.message);
Â  Â  res.status(400).json({ error: err.message });
Â  }
};

// âœ… UPDATED FUNCTION: Replaces your old dynamic generator with the new, robust version.
export const generateDynamicTestSeries = async (req, res) => {
    try {
        const { name: title, sections: sectionRules, ...testDetails } = req.body;

        if (!title || !testDetails.exam || !sectionRules || !Array.isArray(sectionRules) || sectionRules.length === 0) {
            return res.status(400).json({ error: 'Test series title, exam, and at least one section rule are required.' });
        }

        const allGeneratedQuestionIds = new Set();
        const finalSections = [];

        for (const section of sectionRules) {
            const sectionQuestionIds = [];
            
            for (const rule of section.rules) {
                const query = {};
                if (rule.subject) query.subject = rule.subject;
                if (rule.chapter) query.chapter = rule.chapter;
                if (rule.topic) query.topic = rule.topic;
                if (rule.difficulty) query.difficulty = rule.difficulty;

                if (allGeneratedQuestionIds.size > 0) {
                    query._id = { $nin: [...allGeneratedQuestionIds].map(id => new mongoose.Types.ObjectId(id)) };
                }

                const sourceTag = (rule.tags || []).find(tag => tag.startsWith('source_test_'));
                if (sourceTag) {
                    const sourceTestId = sourceTag.replace('source_test_', '');
                    const sourceTest = await TestSeries.findById(sourceTestId).lean();
                    
                    // âœ… BUG FIX: Check if the test and its sections exist.
                    if (sourceTest && Array.isArray(sourceTest.sections)) {
                        const sourceQuestionIds = sourceTest.sections.flatMap(sec => sec.questions);
                        query._id = { ...query._id, $in: sourceQuestionIds };
                    } else {
                        // If source test not found or has no sections, no questions can match this rule.
                        // We will let the count check below handle the error message.
                        query._id = { ...query._id, $in: [] }; 
                    }
                }

                const questions = await Question.aggregate([
                    { $match: query },
                    { $sample: { size: Number(rule.count) || 0 } },
                    { $project: { _id: 1 } }
                ]);

                const questionIds = questions.map(q => q._id);

                if (questionIds.length < rule.count) {
                    const ruleDescription = `${rule.subject || 'Any Subject'} > ${rule.chapter || 'Any Chapter'}`;
                    return res.status(400).json({ 
                        error: `Not enough questions for rule: [${ruleDescription}]. Found ${questionIds.length}, needed ${rule.count}.`
                    });
                }
                
                questionIds.forEach(id => {
                    sectionQuestionIds.push(id);
                    allGeneratedQuestionIds.add(id.toString());
                });
            }

            finalSections.push({
                title: section.title,
                durationInMinutes: section.durationInMinutes,
                questions: sectionQuestionIds,
                marksPerQuestion: section.marksPerQuestion,
                negativeMarking: section.negativeMarking,
                markingScheme: section.markingScheme,
            });
        }
        
        const newTestSeries = new TestSeries({
            title,
            sections: finalSections,
            ...testDetails,
            createdBy: req.user._id, 
        });
        
        const savedTest = await newTestSeries.save();
        
        try {
            if (savedTest.isPublished) {
                const message = `ðŸš€ New Test Available: ${savedTest.title}`;
                const link = `/tests/${savedTest._id}`;
                const allUsers = await User.find({ role: 'user' }, '_id');
                if (allUsers.length > 0) {
                    const notifications = allUsers.map(user => ({ user: user._id, message, link }));
                    await Notification.insertMany(notifications);
                    allUsers.forEach(user => {
                        const userSocketId = req.onlineUsers[user._id.toString()];
                        if (userSocketId) {
                            req.io.to(userSocketId).emit("newNotification", { message, link });
                        }
                    });
                }
            }
        } catch (notificationError) {
            console.error("Failed to send notifications for dynamic test:", notificationError);
        }

        res.status(201).json(savedTest);

    } catch (error) {
        console.error('Error generating dynamic test:', error);
        res.status(500).json({ error: error.message || 'Server error while generating test.' });
    }
};


// ... (All your other functions like getAllTestSeries, getTestSeriesById, updateTestSeries, etc., remain exactly the same below this line)
// GET: All test series
export const getAllTestSeries = async (req, res) => {
Â  try {
Â  Â  const tests = await TestSeries.find().sort({ createdAt: -1 });
Â  Â  const uniqueTests = tests.filter((test, index, self) =>
Â  Â  Â  index === self.findIndex(t => t._id.toString() === test._id.toString())
Â  Â  );
Â  Â  res.json(uniqueTests);
Â  } catch (err) {
Â  Â  console.error('Get All TestSeries Error:', err.message);
Â  Â  res.status(500).json({ error: err.message });
Â  }
};


// GET: Single test series by ID
export const getTestSeriesById = async (req, res) => {
Â  try {
Â  Â  const test = await TestSeries.findById(req.params.id)
Â  Â  Â  .populate('sections.questions', 'questionText questionImage options marks negativeMarks questionType')
Â  Â  Â  .populate('attempts.userId', 'name email');
Â  Â  if (!test) return res.status(404).json({ error: 'TestSeries not found' });
Â  Â  res.json(test);
Â  } catch (err) {
Â  Â  console.error('Get TestSeries By ID Error:', err.message);
Â  Â  res.status(500).json({ error: err.message });
Â  }
};

// PUT: Update test series
export const updateTestSeries = async (req, res) => {
Â  try {
Â  Â  const updated = await TestSeries.findByIdAndUpdate(req.params.id, req.body, { new: true });
Â  Â  if (!updated) return res.status(404).json({ error: 'TestSeries not found' });
Â  Â  res.json(updated);
Â  } catch (err) {
Â  Â  console.error('Update TestSeries Error:', err.message);
Â  Â  res.status(400).json({ error: err.message });
Â  }
};

// DELETE: Delete test series
// In testSeriesController.js

export const deleteTestSeries = async (req, res) => {
Â  try {
Â  Â  const masterTestId = req.params.id;

Â  Â  // Step 1: Delete the master test series template
Â  Â  const deletedMaster = await TestSeries.findByIdAndDelete(masterTestId);

Â  Â  if (!deletedMaster) {
Â  Â  Â  return res.status(404).json({ error: 'Master TestSeries not found' });
Â  Â  }

Â  Â  // Step 2: Delete all instances that were cloned from this master
Â  Â  // This is the "cascading delete" part.
Â  Â  await TestSeries.deleteMany({ originalId: masterTestId });

Â  Â  res.json({ message: 'Master TestSeries and all its instances have been deleted.' });
Â  Â  
Â  } catch (err) {
Â  Â  console.error('Delete TestSeries Error:', err.message);
Â  Â  res.status(500).json({ error: err.message });
Â  }
};


// Get recent test series for a user
export const getRecentTestSeriesForUser = async (req, res) => {
Â  try {
Â  Â  const userId = req.user._id;
Â  Â  const recent = await TestSeries.find({ 'attempts.userId': userId })
Â  Â  Â  .sort({ updatedAt: -1 })
Â  Â  Â  .limit(5)
Â  Â  Â  .select('title exam subjectTags releaseDate');
Â  Â  res.json(recent);
Â  } catch (err) {
Â  Â  console.error(err);
Â  Â  res.status(500).json({ message: 'Error fetching recent test series' });
Â  }
};




export const startTestSecure = async (req, res) => {
Â  const userId = req.user._id;
Â  const { testId } = req.body;

Â  try {
Â  Â  const test = await TestSeries.findOne({
Â  Â  Â  $or: [
Â  Â  Â  Â  { _id: testId },
Â  Â  Â  Â  { originalId: testId }
Â  Â  Â  ]
Â  Â  });

Â  Â  if (!test) return res.status(404).json({ message: 'Test not found' });

Â  Â  if (test.isPaid) {
Â  Â  Â  const user = await User.findById(userId);
Â  Â  Â  const now = new Date();
Â  Â  Â  if (!user.passExpiry || new Date(user.passExpiry) < now) {
Â  Â  Â  Â  return res.status(403).json({ message: 'This is a paid test. Please purchase a pass.' });
Â  Â  Â  }
Â  Â  }

Â  Â  const previousAttempts = test.attempts.filter(a => a.userId.toString() === userId.toString());
Â  Â  const completedAttempts = previousAttempts.filter(a => a.isCompleted);

Â  Â  if (test.isPaid && completedAttempts.length >= 1) {
Â  Â  Â  const user = await User.findById(userId);
Â  Â  Â  const now = new Date();
Â  Â  Â  if (!user.passExpiry || new Date(user.passExpiry) < now) {
Â  Â  Â  Â  return res.status(403).json({ message: 'Only Prime members can reattempt paid tests.' });
Â  Â  Â  }
Â  Â  }

Â  Â  let existingAttempt = test.attempts.find(a => !a.isCompleted && a.userId.toString() === userId.toString());

Â  Â  if (!existingAttempt) {
Â  Â  Â  const newAttempt = {
Â  Â  Â  Â  userId,
Â  Â  Â  Â  startedAt: new Date(),
Â  Â  Â  Â  isCompleted: false,
Â  Â  Â  Â  attemptNumber: completedAttempts.length + 1,
Â  Â  Â  Â  answers: [],
Â  Â  Â  };
Â  Â  Â  test.attempts.push(newAttempt);
Â  Â  Â  await test.save();
Â  Â  Â  existingAttempt = test.attempts[test.attempts.length - 1];
Â  Â  }

Â  Â  const populatedTest = await TestSeries.findById(testId)
Â  Â  Â  .populate({
Â  Â  Â  Â  path: 'sections.questions',
Â  Â  Â  Â  select: 'questionText questionImage options questionType',
Â  Â  Â  });

Â  Â  res.status(200).json({
Â  Â  Â  message: 'Access granted',
Â  Â  Â  testId,
Â  Â  Â  test: populatedTest,
Â  Â  Â  attemptId: existingAttempt._id,
Â  Â  Â  attempt: existingAttempt
Â  Â  });
Â  } catch (err) {
Â  Â  console.error('Start Test Error:', err.message);
Â  Â  res.status(500).json({ message: 'Server error while starting test' });
Â  }
};


export const saveTestProgress = async (req, res) => {
Â  const userId = req.user._id;
Â  const { testId } = req.params;
Â  const { answers, timeLeftInSeconds, currentSectionIndex, currentQuestionIndex } = req.body;

Â  try {
Â  Â  const test = await TestSeries.findById(testId);
Â  Â  if (!test) return res.status(404).json({ message: 'Test not found' });

Â  Â  const attempt = test.attempts.find(
Â  Â  Â  a => a.userId.toString() === userId.toString() && !a.isCompleted
Â  Â  );

Â  Â  if (!attempt) return res.status(404).json({ message: 'Attempt not found or already completed' });

Â  Â  if (timeLeftInSeconds !== undefined) attempt.timeLeftInSeconds = timeLeftInSeconds;
Â  Â  if (currentSectionIndex !== undefined) attempt.currentSectionIndex = currentSectionIndex;
Â  Â  if (currentQuestionIndex !== undefined) attempt.currentQuestionIndex = currentQuestionIndex;

Â  Â  answers.forEach((newAns) => {
Â  Â  Â  const existing = attempt.answers.find(a => a.questionId.toString() === newAns.questionId);
Â  Â  Â  if (existing) {
Â  Â  Â  Â  existing.selectedOptions = newAns.selectedOptions;
Â  Â  Â  Â  existing.timeTaken = newAns.timeTaken || 0;
Â  Â  Â  } else {
Â  Â  Â  Â  attempt.answers.push({
Â  Â  Â  Â  Â  questionId: newAns.questionId,
Â  Â  Â  Â  Â  selectedOptions: newAns.selectedOptions,
Â  Â  Â  Â  Â  timeTaken: newAns.timeTaken || 0,
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  });

Â  Â  await test.save();
Â  Â  res.status(200).json({ message: 'Progress saved' });
Â  } catch (err) {
Â  Â  console.error('Save Progress Error:', err.message);
Â  Â  res.status(500).json({ message: 'Failed to save progress' });
Â  }
};



export const completeTest = async (req, res) => {
Â  const userId = req.user._id;
Â  const { testId } = req.params;

Â  try {
Â  Â  const test = await TestSeries.findById(testId).populate(detailedQuestionPopulation);
Â  Â  if (!test) return res.status(404).json({ message: 'Test not found' });

Â  Â  if (!test.sections || !Array.isArray(test.sections)) {
Â  Â  Â  return res.status(400).json({ message: 'Test sections missing or invalid' });
Â  Â  }

Â  Â  const attempt = test.attempts.find(
Â  Â  Â  a => a.userId.toString() === userId.toString() && !a.isCompleted
Â  Â  );
Â  Â  if (!attempt) return res.status(404).json({ message: 'Attempt not found' });

Â  Â  attempt.isCompleted = true;
Â  Â  attempt.endedAt = new Date();

Â  Â  const { score, total } = calcScore(attempt.answers, test);
Â  Â  attempt.score = score;
Â  Â  attempt.totalMarks = total;
Â  Â  attempt.cutoff = test.cutoff || {};

Â  Â  await test.save();

Â  Â  res.status(200).json({ message: 'Test completed successfully' });
Â  } catch (err) {
Â  Â  console.error('Complete Test Error:', err.message);
Â  Â  res.status(500).json({ message: 'Failed to complete test' });
Â  }
};



export const getScore = async (req, res) => {
Â  const userId = req.user._id;
Â  const { testId } = req.params;

Â  try {
Â  Â  const test = await TestSeries.findById(testId).populate('sections.questions');
Â  Â  const attempt = test.attempts.find(a => a.userId.toString() === userId.toString());

Â  Â  if (!attempt || !attempt.isCompleted) {
Â  Â  Â  return res.status(400).json({ message: "Test not submitted or attempt not found." });
Â  Â  }

Â  Â  const {
Â  Â  Â  score,
Â  Â  Â  totalMarks,
Â  Â  Â  correct,
Â  Â  Â  incorrect,
Â  Â  Â  unattempted
Â  Â  } = calcScore(attempt.answers, test);

Â  Â  const totalQuestions = test.sections.reduce((acc, sec) => acc + sec.questions.length, 0);
Â  Â  const attempted = attempt.answers.filter(a => a.selectedOptions?.length).length;

Â  Â  res.json({
Â  Â  Â  testTitle: test.title,
Â  Â  Â  totalQuestions,
Â  Â  Â  attempted,
Â  Â  Â  correct,
Â  Â  Â  wrong: incorrect,
Â  Â  Â  score,
Â  Â  Â  totalMarks,
Â  Â  Â  attemptNumber: attempt.attemptNumber
Â  Â  });
Â  } catch (err) {
Â  Â  console.error('Score error:', err);
Â  Â  res.status(500).json({ message: "Error fetching score" });
Â  }
};

const calculateDistributionStats = (scores, totalMarks) => {
Â  if (!scores || scores.length === 0) {
Â  Â  return { medianScore: 0, marksDistribution: [] };
Â  }
Â  const sortedScores = [...scores].sort((a, b) => a - b);
Â  const mid = Math.floor(sortedScores.length / 2);
Â  const medianScore = sortedScores.length % 2 !== 0
Â  Â  ? sortedScores[mid]
Â  Â  : (sortedScores[mid - 1] + sortedScores[mid]) / 2;
Â  const marksDistribution = [];
Â  const numBins = 10;
Â  const binSize = Math.max(1, Math.ceil(totalMarks / numBins));
Â  for (let i = 0; i < numBins; i++) {
Â  Â  const rangeStart = i * binSize;
Â  Â  if (rangeStart >= totalMarks && totalMarks > 0) break;
Â  Â  const rangeEnd = rangeStart + binSize;
Â  Â  marksDistribution.push({
Â  Â  Â  range: `${rangeStart} to ${rangeEnd}`,
Â  Â  Â  students: 0,
Â  Â  });
Â  }
Â  if (marksDistribution.length === 0) {
Â  Â  marksDistribution.push({ range: `0 to ${binSize}`, students: 0 });
Â  }
Â  sortedScores.forEach(score => {
Â  Â  const scoreToBin = Math.max(0, score);
Â  Â  let binIndex = Math.floor(scoreToBin / binSize);
Â  Â  binIndex = Math.min(binIndex, marksDistribution.length - 1);
Â  Â  if (marksDistribution[binIndex]) {
Â  Â  Â  marksDistribution[binIndex].students++;
Â  Â  }
Â  });
Â  return { 
Â  Â  medianScore: +medianScore.toFixed(2), 
Â  Â  marksDistribution 
Â  };
};



export const getDetailedResult = async (req, res) => {
Â  const userId = req.user._id;
Â  const { attemptId } = req.params;

Â  try {
Â  Â  const test = await TestSeries.findOne({ 'attempts._id': attemptId })
Â  Â  Â  .populate({
Â  Â  Â  Â  path: 'sections.questions',
Â  Â  Â  Â  model: 'Question',
Â  Â  Â  Â  select: 'questionType correctAnswer answerMin answerMax marks negativeMarks subject chapter topic'
Â  Â  Â  });

Â  Â  if (!test) {
Â  Â  Â  return res.status(404).json({ message: 'Test not found for this attempt' });
Â  Â  }

Â  Â  const attempt = test.attempts.find(a => a._id.toString() === attemptId);
Â  Â  if (!attempt || !attempt.isCompleted) {
Â  Â  Â  return res.status(400).json({ message: 'Attempt not found or not completed' });
Â  Â  }

Â  Â  const allUsersPerformance = test.attempts
Â  Â  Â  .filter(a => a.isCompleted && a.attemptNumber === attempt.attemptNumber)
Â  Â  Â  .map(a => {
Â  Â  Â  Â  const result = calcScore(a.answers, test);
Â  Â  Â  Â  const timeTaken = a.answers.reduce((sum, ans) => sum + (ans.timeTaken || 0), 0);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  userId: a.userId.toString(),
Â  Â  Â  Â  Â  ...result,
Â  Â  Â  Â  Â  timeTaken,
Â  Â  Â  Â  };
Â  Â  Â  });

Â  Â  if (allUsersPerformance.length === 0) {
Â  Â  Â  Â  return res.status(404).json({ message: 'No completed attempts found for this test session.' });
Â  Â  }

Â  Â  const userPerformance = allUsersPerformance.find(p => p.userId === userId.toString());
Â  Â  if (!userPerformance) {
Â  Â  Â  Â  return res.status(404).json({ message: 'Could not find your result in this test session.' });
Â  Â  }

Â  Â  const topperPerformance = [...allUsersPerformance].sort((a, b) => b.score - a.score)[0];

Â  Â  const totalUsers = allUsersPerformance.length;
Â  Â  const avgStats = allUsersPerformance.reduce((acc, curr) => {
Â  Â  Â  Â  acc.score += curr.score;
Â  Â  Â  Â  acc.timeTaken += curr.timeTaken;
Â  Â  Â  Â  acc.accuracy += curr.accuracy;
Â  Â  Â  Â  acc.correct += curr.correct;
Â  Â  Â  Â  acc.incorrect += curr.incorrect;
Â  Â  Â  Â  return acc;
Â  Â  }, { score: 0, timeTaken: 0, accuracy: 0, correct: 0, incorrect: 0 });

Â  Â  const averagePerformance = {
Â  Â  Â  Â  avgScore: +(avgStats.score / totalUsers).toFixed(2),
Â  Â  Â  Â  avgTime: Math.round(avgStats.timeTaken / totalUsers),
Â  Â  Â  Â  avgAccuracy: Math.round(avgStats.accuracy / totalUsers),
Â  Â  Â  Â  avgCorrect: +(avgStats.correct / totalUsers).toFixed(2),
Â  Â  Â  Â  avgIncorrect: +(avgStats.incorrect / totalUsers).toFixed(2),
Â  Â  };

Â  Â  const sortedByScore = allUsersPerformance.map(p => ({ userId: p.userId, score: p.score })).sort((a, b) => b.score - a.score);
Â  Â  const userRank = sortedByScore.findIndex(s => s.userId === userId.toString()) + 1;
Â  Â  
Â  const topUserIds = sortedByScore.slice(0, 10).map(entry => entry.userId);
const users = await User.find({ _id: { $in: topUserIds } }).select('name');
const userMap = new Map(users.map(u => [u._id.toString(), u.name]));

const rankList = sortedByScore.slice(0, 10).map(entry => ({
Â  Â  name: userMap.get(entry.userId) || 'Unknown',
Â  Â  score: entry.score
}));
Â  Â  
Â  Â  const allStudentScores = sortedByScore.map(s => s.score);
Â  Â  const { medianScore, marksDistribution } = calculateDistributionStats(allStudentScores, userPerformance.total);

Â  Â  const questionDetails = test.sections.flatMap(section => 
Â  Â  Â  Â  section.questions.map(q => {
Â  Â  Â  Â  Â  Â  const userAns = attempt.answers.find(a => a.questionId.toString() === q._id.toString());
Â  Â  Â  Â  Â  Â  const isAttempted = userAns && userAns.selectedOptions && userAns.selectedOptions.length > 0;
Â  Â  Â  Â  Â  Â  let isCorrect = false;
Â  Â  Â  Â  Â  Â  if (isAttempted) {
Â  Â  Â  Â  Â  Â  Â  Â  if (q.questionType === 'numerical') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const userAnswer = parseFloat(userAns.selectedOptions[0]);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!isNaN(userAnswer) && q.answerMin != null && q.answerMax != null) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isCorrect = userAnswer >= q.answerMin && userAnswer <= q.answerMax;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isCorrect = [...userAns.selectedOptions].sort().join(',') === [...q.correctAnswer].sort().join(',');
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  questionId: q._id,
Â  Â  Â  Â  Â  Â  Â  Â  subject: q.subject,
Â  Â  Â  Â  Â  Â  Â  Â  chapter: q.chapter,
Â  Â  Â  Â  Â  Â  Â  Â  topic: q.topic,
Â  Â  Â  Â  Â  Â  Â  Â  isCorrect,
Â  Â  Â  Â  Â  Â  Â  Â  isAttempted
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  })
Â  Â  );

Â  Â  res.json({
Â  Â  Â  testTitle: test.title,
Â  Â  Â  userName: req.user.name,
Â  Â  Â  scoreSummary: {
Â  Â  Â  Â  userScore: userPerformance.score,
Â  Â  Â  Â  timeTaken: userPerformance.timeTaken,
Â  Â  Â  Â  accuracy: userPerformance.accuracy,
Â  Â  Â  Â  correct: userPerformance.correct,
Â  Â  Â  Â  incorrect: userPerformance.incorrect,
Â  Â  Â  Â  unattempted: userPerformance.unattempted,
Â  Â  Â  Â  totalMarks: userPerformance.total,
Â  Â  Â  Â  ...averagePerformance,
Â  Â  Â  Â  topScore: topperPerformance.score,
Â  Â  Â  Â  topTime: topperPerformance.timeTaken,
Â  Â  Â  Â  topAccuracy: topperPerformance.accuracy,
Â  Â  Â  Â  topCorrect: topperPerformance.correct,
Â  Â  Â  Â  topIncorrect: topperPerformance.incorrect,
Â  Â  Â  },
Â  Â  Â  sectionStats: userPerformance.sectionStats,
Â  Â  Â  rank: userRank,
Â  Â  Â  rankList,
Â  Â  Â  marksDistribution,
Â  Â  Â  medianScore,
Â  Â  Â  cutoff: test.cutoff || {},
Â  Â  Â  questionDetails
Â  Â  });

Â  } catch (err) {
Â  Â  console.error('getDetailedResult Error:', err.message);
Â  Â  res.status(500).json({ message: 'Error fetching detailed result' });
Â  }
};





export const getLeaderboard = async (req, res) => {
Â  const currentUserId = req.user._id.toString();
Â  const { testId } = req.params;
Â  const { attempt: attemptQuery, best = 'false', latest = 'false' } = req.query;

Â  try {
Â  Â  // Step 1: Fetch the test. We don't need to populate questions for the leaderboard.
Â  Â  const test = await TestSeries.findById(testId);
Â  Â  if (!test) {
Â  Â  Â  return res.status(404).json({ message: 'Test not found' });
Â  Â  }

Â  Â  // Step 2: Group all completed attempts by user ID.
Â  Â  const groupedByUser = {};
Â  Â  test.attempts.forEach(attempt => {
Â  Â  Â  if (!attempt.isCompleted) return; // Skip incomplete attempts
Â  Â  Â  const uid = attempt.userId.toString();
Â  Â  Â  if (!groupedByUser[uid]) {
Â  Â  Â  Â  groupedByUser[uid] = [];
Â  Â  Â  }
Â  Â  Â  groupedByUser[uid].push(attempt);
Â  Â  });

Â  Â  // Step 3: Select the relevant attempt for each user based on query params.
Â  Â  const leaderboardData = [];
Â  Â  for (const [userId, attempts] of Object.entries(groupedByUser)) {
Â  Â  Â  let selectedAttempt;

Â  Â  Â  if (attemptQuery) {
Â  Â  Â  Â  // Find a specific attempt number
Â  Â  Â  Â  selectedAttempt = attempts.find(a => a.attemptNumber === parseInt(attemptQuery));
Â  Â  Â  } else if (best === 'true') {
Â  Â  Â  Â  // Find the attempt with the highest score
Â  Â  Â  Â  // âœ… OPTIMIZATION: Uses the pre-calculated 'score' field, does not call calcScore()
Â  Â  Â  Â  selectedAttempt = attempts.reduce((bestSoFar, current) => {
Â  Â  Â  Â  Â  return current.score > (bestSoFar ? bestSoFar.score : -Infinity) ? current : bestSoFar;
Â  Â  Â  Â  }, null);
Â  Â  Â  } else if (latest === 'true') {
Â  Â  Â  Â  // Find the most recent attempt
Â  Â  Â  Â  selectedAttempt = attempts.reduce((latestSoFar, current) => {
Â  Â  Â  Â  Â  return current.startedAt > latestSoFar.startedAt ? current : latestSoFar;
Â  Â  Â  Â  }, attempts[0]);
Â  Â  Â  } else {
Â  Â  Â  Â  // Default to the first attempt if no filter is specified
Â  Â  Â  Â  selectedAttempt = attempts.find(a => a.attemptNumber === 1);
Â  Â  Â  }

Â  Â  Â  if (selectedAttempt) {
Â  Â  Â  Â  leaderboardData.push({
Â  Â  Â  Â  Â  userId: userId,
Â  Â  Â  Â  Â  score: selectedAttempt.score || 0, // Use the saved score
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  }

Â  Â  // Step 4: Sort the results by score in descending order.
Â  Â  leaderboardData.sort((a, b) => b.score - a.score);

Â  Â  // Step 5: Efficiently fetch user names for the leaderboard.
Â  Â  // âœ… BUG FIX & PERFORMANCE: Fixes the N+1 query problem.
Â  Â  const userIds = leaderboardData.map(entry => entry.userId);
Â  Â  const users = await User.find({ _id: { $in: userIds } }).select('name');
Â  Â  const userMap = new Map(users.map(u => [u._id.toString(), u.name]));

Â  Â  // Step 6: Construct the final rank list.
Â  Â  const rankList = leaderboardData.map((entry, index) => ({
Â  Â  Â  rank: index + 1,
Â  Â  Â  name: userMap.get(entry.userId) || 'Unknown User',
Â  Â  Â  score: entry.score,
Â  Â  Â  isUser: entry.userId === currentUserId, // Flag if this is the currently logged-in user
Â  Â  }));

Â  Â  res.json(rankList);

Â  } catch (err) {
Â  Â  console.error('Leaderboard error:', err.message);
Â  Â  res.status(500).json({ message: 'Failed to load leaderboard' });
Â  }
};






export const getAllAttemptsSummary = async (req, res) => {
Â  const { testId } = req.params;

Â  try {
Â  Â  const test = await TestSeries.findById(testId)
Â  Â  Â  .populate(detailedQuestionPopulation)
Â  Â  Â  .populate('attempts.userId', 'name');
Â  Â  if (!test) return res.status(404).json({ message: 'Test not found' });

Â  Â  const grouped = {};

Â  Â  test.attempts
Â  Â  Â  .filter(a => a.isCompleted)
Â  Â  Â  .forEach((a) => {
Â  Â  Â  Â  if (!grouped[a.attemptNumber]) {
Â  Â  Â  Â  Â  grouped[a.attemptNumber] = {
Â  Â  Â  Â  Â  Â  attemptNumber: a.attemptNumber,
Â  Â  Â  Â  Â  Â  date: a.endedAt,
Â  Â  Â  Â  Â  Â  users: []
Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }

Â  Â  Â  Â  const { score } = calcScore(a.answers, test);

Â  Â  Â  Â  grouped[a.attemptNumber].users.push({
Â  Â  Â  Â  Â  userId: a.userId._id,
Â  Â  Â  Â  Â  name: a.userId.name,
Â  Â  Â  Â  Â  score,
Â  Â  Â  Â  Â  endedAt: a.endedAt
Â  Â  Â  Â  });
Â  Â  Â  });

Â  Â  const response = Object.values(grouped)
Â  Â  Â  .sort((a, b) => a.attemptNumber - b.attemptNumber)
Â  Â  Â  .map(group => {
Â  Â  Â  Â  group.users.sort((a, b) => b.score - a.score);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  ...group,
Â  Â  Â  Â  Â  users: group.users.map((u, idx) => ({
Â  Â  Â  Â  Â  Â  ...u,
Â  Â  Â  Â  Â  Â  rank: idx + 1
Â  Â  Â  Â  Â  }))
Â  Â  Â  Â  };
Â  Â  Â  });

Â  Â  res.json(response);
Â  } catch (err) {
Â  Â  console.error('getAllAttemptsSummary Error:', err.message);
Â  Â  res.status(500).json({ message: 'Failed to fetch summary' });
Â  }
};


// GET: Fetch current user's attempt for a test
export const getUserAttemptForTest = async (req, res) => {
Â  const userId = req.user._id;
Â  const { testId } = req.params;

Â  try {
Â  Â  const test = await TestSeries.findById(testId);
Â  Â  if (!test) return res.status(404).json({ message: 'Test not found' });

Â  Â  const attempts = test.attempts.filter(
Â  Â  Â  (a) => a.userId.toString() === userId.toString()
Â  Â  );

Â  Â  if (!attempts.length) {
Â  Â  Â  return res.status(404).json({ message: 'No attempts found for user' });
Â  Â  }

Â  Â  attempts.sort((a, b) => a.attemptNumber - b.attemptNumber);

Â  Â  res.status(200).json(attempts);
Â  } catch (err) {
Â  Â  console.error('getUserAttemptForTest error:', err.message);
Â  Â  res.status(500).json({ message: 'Error fetching user attempts' });
Â  }
};


export const getSolutionForTest = async (req, res) => {
Â  const { testId } = req.params;
Â  const { attemptId } = req.query;

Â  try {
Â  Â  const test = await TestSeries.findById(testId).populate({
Â  Â  Â  path: 'sections.questions',
Â  Â  Â  select: 'questionText questionImage options correctAnswer questionType explanation answerMin answerMax'
Â  Â  });

Â  Â  if (!test) {
Â  Â  Â  return res.status(404).json({ message: 'Test not found' });
Â  Â  }

Â  Â  const selectedAttempt = test.attempts.find(a => a._id.toString() === attemptId);
Â  Â  if (!selectedAttempt) {
Â  Â  Â  return res.status(404).json({ message: 'Attempt not found for this test.' });
Â  Â  }

Â  Â  const allAttemptsForThisSession = test.attempts.filter(
Â  Â  Â  a => a.isCompleted && a.attemptNumber === selectedAttempt.attemptNumber
Â  Â  );

Â  Â  const questionStats = {};

Â  Â  test.sections.forEach(section => {
Â  Â  Â  section.questions.forEach(q => {
Â  Â  Â  Â  const questionId = q._id.toString();
Â  Â  Â  Â  let totalTime = 0;
Â  Â  Â  Â  let correctCount = 0;
Â  Â  Â  Â  let attemptCount = 0;

Â  Â  Â  Â  allAttemptsForThisSession.forEach(attempt => {
Â  Â  Â  Â  Â  const userAnswerObj = attempt.answers.find(ans => ans.questionId.toString() === questionId);
Â  Â  Â  Â  Â  if (userAnswerObj && userAnswerObj.selectedOptions.length > 0) {
Â  Â  Â  Â  Â  Â  attemptCount++;
Â  Â  Â  Â  Â  Â  totalTime += userAnswerObj.timeTaken || 0;

Â  Â  Â  Â  Â  Â  let isCorrect = false;
Â  Â  Â  Â  Â  Â  if (q.questionType === 'numerical') {
Â  Â  Â  Â  Â  Â  Â  const userAnswer = parseFloat(userAnswerObj.selectedOptions[0]);
Â  Â  Â  Â  Â  Â  Â  if (!isNaN(userAnswer) && q.answerMin != null && q.answerMax != null) {
Â  Â  Â  Â  Â  Â  Â  Â  isCorrect = userAnswer >= q.answerMin && userAnswer <= q.answerMax;
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  const correctAns = q.correctAnswer || [];
Â  Â  Â  Â  Â  Â  Â  isCorrect = [...userAnswerObj.selectedOptions].sort().join(',') === [...correctAns].sort().join(',');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  if (isCorrect) {
Â  Â  Â  Â  Â  Â  Â  correctCount++;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });

Â  Â  Â  Â  questionStats[questionId] = {
Â  Â  Â  Â  Â  avgTime: attemptCount > 0 ? Math.round(totalTime / attemptCount) : 0,
Â  Â  Â  Â  Â  percentCorrect: attemptCount > 0 ? Math.round((correctCount / attemptCount) * 100) : 0,
Â  Â  Â  Â  };
Â  Â  Â  });
Â  Â  });

Â  Â  const responses = {};
Â  Â  selectedAttempt.answers.forEach(ans => {
Â  Â  Â  responses[ans.questionId.toString()] = ans.selectedOptions;
Â  Â  });

Â  Â  res.status(200).json({
Â  Â  Â  test,
Â  Â  Â  responses,
Â  Â  Â  questionStats,
Â  Â  });
Â  } catch (err) {
Â  Â  console.error('Get Solution Error:', err.message);
Â  Â  res.status(500).json({ message: 'Failed to fetch solution' });
Â  }
};



export const getLatestAttemptSummaries = async (req, res) => {
Â  const userId = req.user._id;

Â  try {
Â  Â  const tests = await TestSeries.find({ 'attempts.userId': userId }).populate('sections.questions');
Â  Â  const latestAttempts = [];

Â  Â  for (const test of tests) {
Â  Â  Â  const userAttempts = test.attempts
Â  Â  Â  Â  .filter(a => a.userId.toString() === userId.toString() && a.isCompleted)
Â  Â  Â  Â  .sort((a, b) => new Date(b.endedAt) - new Date(a.endedAt));

Â  Â  Â  if (!userAttempts.length) continue;

Â  Â  Â  const latest = userAttempts[0];
Â  Â  Â  const { score, totalMarks } = calcScore(latest.answers, test);

Â  Â  Â  const allScores = test.attempts
Â  Â  Â  Â  .filter(a => a.isCompleted && a.attemptNumber === latest.attemptNumber)
Â  Â  Â  Â  .map(a => ({
Â  Â  Â  Â  Â  userId: a.userId.toString(),
Â  Â  Â  Â  Â  ...calcScore(a.answers, test)
Â  Â  Â  Â  }))
Â  Â  Â  Â  .sort((a, b) => b.score - a.score);

Â  Â  Â  const rank = allScores.findIndex(s => s.userId === userId.toString()) + 1;

Â  Â  Â  latestAttempts.push({
Â  Â  Â  Â  testId: test._id,
Â  Â  Â  Â  testTitle: test.title,
Â  Â  Â  Â  totalMarks,
Â  Â  Â  Â  marks: score,
Â  Â  Â  Â  rank,
Â  Â  Â  Â  attemptNumber: latest.attemptNumber,
Â  Â  Â  Â  endedAt: latest.endedAt,
Â  Â  Â  Â  cutoffs: test.cutoff || {}
Â  Â  Â  });
Â  Â  }

Â  Â  res.json(latestAttempts);
Â  } catch (err) {
Â  Â  console.error('getLatestAttemptSummaries error:', err);
Â  Â  res.status(500).json({ message: 'Failed to load latest attempts summary' });
Â  }
};

export const getRankDistribution = async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const { testId } = req.params;
Â  Â  Â  Â  const { attempt: attemptNumber } = req.query;

Â  Â  Â  Â  const test = await TestSeries.findById(testId).populate(detailedQuestionPopulation);
Â  Â  Â  Â  if (!test) return res.status(404).json({ message: 'Test not found' });

Â  Â  Â  Â  const attemptsForSession = test.attempts.filter(a => a.isCompleted && a.attemptNumber === parseInt(attemptNumber));

Â  Â  Â  Â  if (attemptsForSession.length === 0) {
Â  Â  Â  Â  Â  Â  return res.json([]);
Â  Â  Â  Â  }

Â  Â  Â  Â  const allScores = attemptsForSession.map(a => {
Â  Â  Â  Â  Â  Â  const { score } = calcScore(a.answers, test);
Â  Â  Â  Â  Â  Â  return { userId: a.userId.toString(), score };
Â  Â  Â  Â  });

Â  Â  Â  Â  allScores.sort((a, b) => b.score - a.score);

Â  Â  Â  Â  const rankDistribution = allScores.map((entry, index) => ({
Â  Â  Â  Â  Â  Â  rank: index + 1,
Â  Â  Â  Â  Â  Â  score: entry.score,
Â  Â  Â  Â  }));

Â  Â  Â  Â  res.json(rankDistribution);

Â  Â  } catch (err) {
Â  Â  Â  Â  console.error('Get Rank Distribution Error:', err.message);
Â  Â  Â  Â  res.status(500).json({ error: 'Server error while fetching rank distribution' });
Â  Â  }};